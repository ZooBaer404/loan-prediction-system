#+TITLE:Loan Prediction System
#+PROPERTY: header-args :python :tangle ./main.py :mkdirp yes

For a bank which deals with loans from customers.
It is important to for a bank to predict the next loan and use the extracted knowledge to improve their services in certain regions.

* Loan Prediction Process

The dataset I have has 13 columns. Ranging from different categories. Even how many dependents the customer has.

Here is a sneak peak at the dataset.

| Loan_ID  | Gender | Married | Dependents | Education    | Self_Employed | ApplicantIncome | CoapplicantIncome | LoanAmount | Loan_Amount_Term | Credit_History | Property_Area | Loan_Status |
|----------+--------+---------+------------+--------------+---------------+-----------------+-------------------+------------+------------------+----------------+---------------+-------------|
| LP001002 | Male   | No      |          0 | Graduate     | No            |            5849 |                 0 |            |              360 |              1 | Urban         | Y           |
| LP001003 | Male   | Yes     |          1 | Graduate     | No            |            4583 |              1508 |        128 |              360 |              1 | Rural         | N           |
| LP001005 | Male   | Yes     |          0 | Graduate     | Yes           |            3000 |                 0 |         66 |              360 |              1 | Urban         | Y           |
| LP001006 | Male   | Yes     |          0 | Not Graduate | No            |            2583 |              2358 |        120 |              360 |              1 | Urban         | Y           |
| LP001734 | Female | Yes     |          2 | Graduate     | No            |            4283 |              2383 |        127 |              360 |                | Semiurban     | Y           |
| LP001736 | Male   | Yes     |          0 | Graduate     | No            |            2221 |                 0 |         60 |              360 |              0 | Urban         | N           |
| LP001743 | Male   | Yes     |          2 | Graduate     | No            |            4009 |              1717 |        116 |              360 |              1 | Semiurban     | Y           |
| LP001744 | Male   | No      |          0 | Graduate     | No            |            2971 |              2791 |        144 |              360 |              1 | Semiurban     | Y           |
| LP001749 | Male   | Yes     |          0 | Graduate     | No            |            7578 |              1010 |        175 |                  |              1 | Semiurban     | Y           |
| LP001750 | Male   | Yes     |          0 | Graduate     | No            |            6250 |                 0 |        128 |              360 |              1 | Semiurban     | Y           |
| LP001751 | Male   | Yes     |          0 | Graduate     | No            |            3250 |                 0 |        170 |              360 |              1 | Rural         | N           |
| LP001754 | Male   | Yes     |            | Not Graduate | Yes           |            4735 |                 0 |        138 |              360 |              1 | Urban         | N           |
| LP001758 | Male   | Yes     |          2 | Graduate     | No            |            6250 |              1695 |        210 |              360 |              1 | Semiurban     | Y           |
| LP001760 | Male   |         |            | Graduate     | No            |            4758 |                 0 |        158 |              480 |              1 | Semiurban     | Y           |
|----------+--------+---------+------------+--------------+---------------+-----------------+-------------------+------------+------------------+----------------+---------------+-------------|

* Preprocessing

First things first, I have to turn these entries into a high-quality data so that we can train our model based on it.

#+begin_src python :tangle no
  import pandas as pd

  dataset = pd.read_csv("res/loan-dataset.csv")
  return dataset
#+end_src

#+RESULTS:
#+begin_example
      Loan_ID  Gender Married  ... Credit_History Property_Area Loan_Status
0    LP001002    Male      No  ...            1.0         Urban           Y
1    LP001003    Male     Yes  ...            1.0         Rural           N
2    LP001005    Male     Yes  ...            1.0         Urban           Y
3    LP001006    Male     Yes  ...            1.0         Urban           Y
4    LP001008    Male      No  ...            1.0         Urban           Y
..        ...     ...     ...  ...            ...           ...         ...
609  LP002978  Female      No  ...            1.0         Rural           Y
610  LP002979    Male     Yes  ...            1.0         Rural           Y
611  LP002983    Male     Yes  ...            1.0         Urban           Y
612  LP002984    Male     Yes  ...            1.0         Urban           Y
613  LP002990  Female      No  ...            0.0     Semiurban           N

[614 rows x 13 columns]
#+end_example

** Null Values

Number of Missing values

#+begin_src python
  import pandas as pd
  dataset = pd.read_csv("res/loan-dataset.csv")
  return dataset[dataset.isnull().any(axis=1)]
#+end_src

#+RESULTS:
#+begin_example
      Loan_ID  Gender Married  ... Credit_History Property_Area Loan_Status
0    LP001002    Male      No  ...            1.0         Urban           Y
11   LP001027    Male     Yes  ...            1.0         Urban           Y
16   LP001034    Male      No  ...            NaN         Urban           Y
19   LP001041    Male     Yes  ...            1.0         Urban           Y
23   LP001050     NaN     Yes  ...            0.0         Rural           N
..        ...     ...     ...  ...            ...           ...         ...
592  LP002933     NaN      No  ...            1.0     Semiurban           Y
597  LP002943    Male      No  ...            0.0     Semiurban           N
600  LP002949  Female      No  ...            NaN         Urban           N
601  LP002950    Male     Yes  ...            1.0         Rural           Y
605  LP002960    Male     Yes  ...            1.0         Urban           N

[134 rows x 13 columns]
#+end_example


Number of missing values per column

#+begin_src python
  import pandas as pd
  dataset = pd.read_csv("res/loan-dataset.csv")
  return dataset.isnull().sum()
#+end_src

#+RESULTS:
#+begin_example
Loan_ID               0
Gender               13
Married               3
Dependents           15
Education             0
Self_Employed        32
ApplicantIncome       0
CoapplicantIncome     0
LoanAmount           22
Loan_Amount_Term     14
Credit_History       50
Property_Area         0
Loan_Status           0
dtype: int64
#+end_example


*** Filling the missing values

- Loan_ID: replace with field name
- Gender: replace with field name
- Married: replace with field name
- Dependents: replace with field name (*)
- Education: replace with most used value
- Self_Employed: replace with most used value
- ApplicantIncome: replace with field name (*)
- CoApplicantIncome: replace with field name (*)
- LoanAmount: replace with field name (*)
- Loan_Amount_Term: replace with mode
- Credit_History: replace with mode
- Property_Area: replace with mode
- Loan_Status: replace with mode

(*) : possibility of an outiler affecting the results

Q: Why didn't you fill in the missing numerical values with the mean?
A: Because there is a possibility of an outlier lurking all of them.
   We have to deal with them first, then, we can compute the mean.
   For now, we replace them with the column name.

#+srcname: null_values
#+begin_src python :tangle no
  import pandas as pd

#+end_src

#+RESULTS:

** Outliers
